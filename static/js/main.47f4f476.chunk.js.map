{"version":3,"sources":["components/Card/Card.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","image","id","firstName","lastName","city","country","email","phone","className","alt","src","Home","state","employees","value","handleOnChange","event","setState","target","handleSearch","filtered","filter","emp","name","last","includes","handleClear","Axios","get","then","data","results","catch","err","console","log","handleSort","type","sortedEmployees","sort","a","b","localeCompare","onClick","this","onChange","placeholder","map","employee","key","login","uuid","picture","medium","first","location","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.47f4f476.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({\r\n  image,\r\n  id,\r\n  firstName,\r\n  lastName,\r\n  city,\r\n  country,\r\n  email,\r\n  phone,\r\n}) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={id} src={image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {firstName} {lastName}\r\n          </li>\r\n          <li>\r\n            <strong>Location:</strong> {city}, {country}\r\n          </li>\r\n          <li>\r\n            <strong>Phone:</strong> {phone}\r\n          </li>\r\n          <li>\r\n            <strong>Email:</strong> {email}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../components/Card/Card\";\r\nimport Axios from \"axios\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    employees: [],\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    Axios.get(\"https://randomuser.me/api/?results=50\")\r\n      .then((data) => {\r\n        this.setState({ employees: data.data.results });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  handleOnChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n    this.handleSearch();\r\n  };\r\n\r\n  handleSearch = () => {\r\n    const filtered = this.state.employees.filter((emp) =>\r\n      emp.name.last.includes(this.state.value)\r\n    );\r\n    this.setState({ employees: filtered });\r\n  };\r\n  handleClear = () => {\r\n    this.setState({ value: \"\" });\r\n    Axios.get(\"https://randomuser.me/api/?results=50\")\r\n      .then((data) => {\r\n        this.setState({ employees: data.data.results });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  handleSort = (type) => {\r\n    const sortedEmployees = this.state.employees.sort((a, b) => {\r\n      if (type === \"ascending\") {\r\n        return a.name.last.localeCompare(b.name.last);\r\n      } else {\r\n        return b.name.last.localeCompare(a.name.last);\r\n      }\r\n    });\r\n    this.setState({ employees: sortedEmployees });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container bg-light\">\r\n        <div className=\"col-12 bg-dark text-white\" id=\"title\">\r\n          <h1 className=\"text-center\">Employee Tracker</h1>\r\n        </div>\r\n        <div className=\"row bg-light\">\r\n          <div className=\"col-l\">\r\n            <div className=\"row\"></div>\r\n            <h5>Sort by Last Name</h5>\r\n            <button\r\n              className=\"btn btn-info my-2 my-sm-0\"\r\n              onClick={() => this.handleSort(\"ascending\")}\r\n            >\r\n              Ascending\r\n            </button>\r\n            <button\r\n              className=\"btn btn-info\"\r\n              onClick={() => this.handleSort(\"descending\")}\r\n            >\r\n              Descending\r\n            </button>\r\n          </div>\r\n          <div className=\"col text-center\">\r\n            <br></br>\r\n          </div>\r\n          <div className=\"col-l\">\r\n            <h5>Search by Last Name</h5>\r\n            <input\r\n              className=\"input-group\"\r\n              value={this.state.value}\r\n              onChange={this.handleOnChange}\r\n              type=\"text\"\r\n              placeholder=\"Last Name\"\r\n            />\r\n            <button onClick={() => this.handleClear()}>Clear</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\"></div>\r\n\r\n        <div className=\"row\">\r\n          {this.state.employees.map((employee) => (\r\n            <Card\r\n              key={employee.login.uuid}\r\n              image={employee.picture.medium}\r\n              id={employee.id.value}\r\n              firstName={employee.name.first}\r\n              lastName={employee.name.last}\r\n              city={employee.location.city}\r\n              country={employee.location.country}\r\n              email={employee.email}\r\n              phone={employee.phone}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}