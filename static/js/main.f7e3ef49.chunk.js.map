{"version":3,"sources":["components/Card/Card.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","image","id","firstName","lastName","location","email","phone","className","alt","src","Home","state","searchValue","employees","value","handleOnChange","event","setState","target","console","log","handleSearch","searchedItem","filtered","filter","emp","name","first","includes","Axios","get","then","data","results","catch","err","this","onChange","type","placeholder","map","employee","key","login","uuid","picture","medium","last","city","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4QAmCeA,G,MAhCF,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,GAAIC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC/D,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKN,EAAWO,IAAKT,KAE5B,yBAAKO,UAAU,WACb,4BACE,4BACE,uCADF,IACwBN,GAExB,4BACE,+CADF,IACgCC,GAEhC,4BACE,8CADF,IAC+BC,GAE/B,4BACE,6CADF,IAC8BC,GAE9B,4BACE,0CADF,IAC2BC,GAE3B,4BACE,0CADF,IAC2BC,Q,iBCuCtBI,E,4MA7DbC,MAAQ,CACNC,YAAa,GACbC,UAAW,GACXC,MAAO,I,EAaTC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEH,MAAOE,EAAME,OAAOJ,QACpCK,QAAQC,IAAI,EAAKT,MAAMG,OACvB,EAAKO,aAAa,EAAKV,MAAMG,Q,EAG/BO,aAAe,SAACC,GACd,IAAMC,EAAW,EAAKZ,MAAME,UAAUW,QAAO,SAACC,GAAD,OAC3CA,EAAIC,KAAKC,MAAMC,SAASN,MAE1B,EAAKL,SAAS,CAAEJ,UAAWU,K,kEApBR,IAAD,OAClBM,IAAMC,IAAI,yCACPC,MAAK,SAACC,GACL,EAAKf,SAAS,CAAEJ,UAAWmB,EAAKA,KAAKC,aAEtCC,OAAM,SAACC,GACNhB,QAAQC,IAAIe,Q,+BAkBhB,OACE,yBAAK5B,UAAU,aACb,2BACEO,MAAOsB,KAAKzB,MAAMG,MAClBuB,SAAUD,KAAKrB,eACfuB,KAAK,OACLC,YAAY,eAEd,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,eAAd,wBAGD6B,KAAKzB,MAAME,UAAU2B,KAAI,SAACC,GAAD,OACxB,kBAAC,EAAD,CACEC,IAAKD,EAASE,MAAMC,KACpB5C,MAAOyC,EAASI,QAAQC,OACxB7C,GAAIwC,EAASxC,GAAGa,MAChBZ,UAAWuC,EAASf,KAAKC,MACzBxB,SAAUsC,EAASf,KAAKqB,KACxB3C,SAAUqC,EAASrC,SAAS4C,KAC5B3C,MAAOoC,EAASpC,MAChBC,MAAOmC,EAASnC,iB,GArDX2C,aCQJC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.f7e3ef49.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ image, id, firstName, lastName, location, email, phone }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={firstName} src={image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>ID:</strong> {id}\r\n          </li>\r\n          <li>\r\n            <strong>First Name:</strong> {firstName}\r\n          </li>\r\n          <li>\r\n            <strong>Last Name:</strong> {lastName}\r\n          </li>\r\n          <li>\r\n            <strong>Location:</strong> {location}\r\n          </li>\r\n          <li>\r\n            <strong>Email:</strong> {email}\r\n          </li>\r\n          <li>\r\n            <strong>Phone:</strong> {phone}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"../components/Card/Card\";\r\nimport Axios from \"axios\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    searchValue: \"\",\r\n    employees: [],\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    Axios.get(\"https://randomuser.me/api/?results=50\")\r\n      .then((data) => {\r\n        this.setState({ employees: data.data.results });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  handleOnChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n    console.log(this.state.value);\r\n    this.handleSearch(this.state.value);\r\n  };\r\n\r\n  handleSearch = (searchedItem) => {\r\n    const filtered = this.state.employees.filter((emp) =>\r\n      emp.name.first.includes(searchedItem)\r\n    );\r\n    this.setState({ employees: filtered });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <input\r\n          value={this.state.value}\r\n          onChange={this.handleOnChange}\r\n          type=\"text\"\r\n          placeholder=\"First Name\"\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <h1 className=\"text-center\">This is my homepage</h1>\r\n          </div>\r\n\r\n          {this.state.employees.map((employee) => (\r\n            <Card\r\n              key={employee.login.uuid}\r\n              image={employee.picture.medium}\r\n              id={employee.id.value}\r\n              firstName={employee.name.first}\r\n              lastName={employee.name.last}\r\n              location={employee.location.city}\r\n              email={employee.email}\r\n              phone={employee.phone}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n      {/* <h1>Welcome Michael</h1> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}